---
// filepath: /mnt/World/site/src/components/theme/ThemeToggle.astro
import { Icon } from "astro-icon/components";
---

<button
  id="theme-toggle"
  class="flex w-full items-center justify-center gap-2 rounded-md px-3 py-4 text-sm font-medium text-blue-700 transition-colors duration-200 hover:bg-blue-50 hover:text-blue-900 dark:text-sky-300 dark:hover:bg-sky-900/30 dark:hover:text-sky-100"
  type="button"
  aria-label="Toggle theme"
>
  <span
    id="theme-toggle-icon"
    class="relative flex h-5 w-5 items-center justify-center"
  >
    <Icon
      name="mdi:white-balance-sunny"
      data-theme="light"
      class="absolute scale-100 opacity-100 transition-all duration-300"
      height={20}
      width={20}
    />
    <Icon
      name="mdi:monitor"
      data-theme="default"
      class="absolute scale-50 opacity-0 transition-all duration-300"
      height={20}
      width={20}
    />
    <Icon
      name="mdi:weather-night"
      data-theme="dark"
      class="absolute scale-50 opacity-0 transition-all duration-300"
      height={20}
      width={20}
    />
  </span>
  <span class="hidden md:inline">Theme</span>
</button>

<script is:inline>
  const themeOrder = ["light", "default", "dark"];

  function getSystemTheme() {
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  }

  function setTheme(theme) {
    const html = document.documentElement;
    html.classList.remove("light", "dark");
    if (theme === "default") {
      localStorage.removeItem("theme");
      theme = getSystemTheme();
    } else {
      localStorage.setItem("theme", theme);
    }
    html.classList.add(theme);
    updateIcon();
  }

  function updateIcon() {
    const iconWrap = document.getElementById("theme-toggle-icon");
    if (!iconWrap) return;
    iconWrap.querySelectorAll("[data-theme]").forEach((icon) => {
      icon.classList.add("opacity-0", "scale-50");
      icon.classList.remove("opacity-100", "scale-100");
    });
    let showTheme = localStorage.getItem("theme") || "default";
    const icon = iconWrap.querySelector(`[data-theme="${showTheme}"]`);
    if (icon) {
      icon.classList.remove("opacity-0", "scale-50");
      icon.classList.add("opacity-100", "scale-100");
    }
  }

  function attachThemeToggleListener() {
    const btn = document.getElementById("theme-toggle");
    if (!btn) return;
    // Remove previous listener if any
    btn.onclick = null;
    btn.addEventListener("click", () => {
      let current = localStorage.getItem("theme") || "default";
      let idx = themeOrder.indexOf(current);
      let next = themeOrder[(idx + 1) % themeOrder.length];
      setTheme(next);
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    let theme = localStorage.getItem("theme") || "default";
    setTheme(theme);
    attachThemeToggleListener();
  });

  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", () => {
      if (!localStorage.getItem("theme")) {
        setTheme("default");
      }
    });

  document.addEventListener("astro:after-swap", () => {
    // Only update icon and theme, don't re-attach listeners
    let theme = localStorage.getItem("theme") || "default";
    setTheme(theme);
    attachThemeToggleListener();
  });
</script>
