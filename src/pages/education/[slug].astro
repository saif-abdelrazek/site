---
import { getCollection, render } from "astro:content";
import type { CollectionEntry } from "astro:content";
import MainLayout from "../../layouts/MainLayout.astro";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";

export async function getStaticPaths() {
  const education = await getCollection("education");
  if (!education || education.length === 0) {
    console.warn("No education entries found.");
    return [];
  }
  return education.map((entry) => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}

interface EduProps {
  entry: CollectionEntry<"education">;
}

const { entry } = Astro.props as EduProps;

if (!entry || !entry.data) {
  return Astro.redirect("/404");
}

const {
  title,
  institution,
  location,
  startDate,
  endDate,
  current,
  degree,
  type,
  tags,
  image,
  description,
  link,
} = entry.data;
const { Content } = await render(entry);
const pageTitle = title + " | Saif Abdelrazek's Education";
const pageDescription = description + " | Saif Abdelrazek's Education History";
---

<MainLayout title={pageTitle} description={pageDescription}>
  <main
    class="flex min-h-screen flex-col items-center justify-center bg-blue-50 py-12 dark:bg-slate-900"
  >
    <div class="mb-6 flex w-full max-w-3xl justify-start">
      <a
        id="back-link"
        href="/#education"
        class="ml-2 inline-flex items-center gap-2 rounded bg-blue-100 px-3 py-2 font-semibold text-blue-700 transition-colors hover:bg-blue-200 dark:bg-sky-900/60 dark:text-sky-200 dark:hover:bg-sky-800"
        aria-label="Back to Education Section"
      >
        <Icon name="mdi:arrow-left" class="h-5 w-5" />
        <span id="back-link-text"> Back to Education Section </span>
      </a>
    </div>
    <div
      class="w-full max-w-3xl rounded-2xl bg-white p-8 shadow-xl dark:bg-slate-800"
    >
      <div class="flex flex-col gap-6 md:flex-row md:items-center">
        {
          image && (
            <Image
              src={image}
              alt={title}
              class="mb-4 h-24 w-24 rounded-full border-2 border-blue-400 object-cover shadow-md md:mb-0 dark:border-sky-900"
              loading="lazy"
            />
          )
        }
        <div class="flex-1 text-left">
          <h1 class="mb-2 text-3xl font-bold text-sky-700 dark:text-sky-300">
            {title}
          </h1>
          {
            institution && (
              <div class="mb-1 text-lg font-semibold text-blue-600 dark:text-sky-400">
                {institution}
              </div>
            )
          }
          {
            location && (
              <div class="mb-1 text-sm text-gray-500 dark:text-gray-400">
                {location}
              </div>
            )
          }
          <div class="mb-2 text-xs text-gray-600 dark:text-gray-400">
            {
              startDate
                ? new Date(startDate).toLocaleDateString(undefined, {
                    year: "numeric",
                    month: "short",
                  })
                : ""
            }
            {" â€“ "}
            {
              current
                ? "Present"
                : endDate
                  ? new Date(endDate).toLocaleDateString(undefined, {
                      year: "numeric",
                      month: "short",
                    })
                  : ""
            }
          </div>
          {
            degree && (
              <div class="mb-2 text-xs font-semibold text-blue-600 dark:text-sky-300">
                {degree}
              </div>
            )
          }
          {
            type && (
              <div class="mb-2 text-xs text-blue-400 dark:text-sky-400">
                {type}
              </div>
            )
          }
          {
            tags && tags.length > 0 && (
              <div class="mb-4 flex flex-wrap gap-2">
                {tags.map((tag) => (
                  <span class="rounded bg-blue-100 px-2 py-1 text-xs font-semibold text-blue-700 dark:bg-sky-900/60 dark:text-sky-200">
                    {tag}
                  </span>
                ))}
              </div>
            )
          }
          {
            link && (
              <a
                href={link}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center gap-2 rounded-lg bg-gradient-to-r from-sky-500 to-blue-600 px-4 py-2 text-sm font-semibold text-white shadow transition hover:from-sky-600 hover:to-blue-700"
              >
                <Icon name="mdi:open-in-new" class="h-5 w-5" />
                External Link
              </a>
            )
          }
        </div>
      </div>
      {
        description && (
          <p class="mt-6 mb-4 text-base text-gray-700 dark:text-gray-200">
            {description}
          </p>
        )
      }
      <article class="prose prose-sky dark:prose-invert mt-8">
        <Content />
      </article>
    </div>
  </main>
  <script is:inline>
    const handleBackLink = () => {
    // Get the query parameter from the URL
    const url = new URL(window.location.href);
    const currentSlug = url.pathname.split("/").pop();
    const from = url.searchParams.get("from");

    // Decide where to go back
    const backHref = from === "all" ? "/education#" + currentSlug : "/#education";
    const backLabel =
      from === "all" ? "Back to All Education" : "Back to Education Section";

    const backLink = document.getElementById("back-link");
    const backLinkText = document.getElementById("back-link-text");

      if (backLink && backLinkText) {
        backLink.href = backHref;
        backLinkText.textContent = backLabel;
        backLink.setAttribute("aria-label", backLabel);
      } else {
        console.warn("Back link not found in the document.");
      }
  }
    handleBackLink();

    document.addEventListener("astro:after-swap", () => {
      handleBackLink();
    });
  </script>
</MainLayout>
